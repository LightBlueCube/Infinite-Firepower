global function FindNearestSafeSpotAndPutEntity
global function FindNearestSafeSpotFaceCenterPointAndPutEntity

void function FindNearestSafeSpotAndPutEntity( entity ent, float severity = 10, int maxTried = 100 )
{
	if( maxTried <= 0 )
		return

	vector pos = ent.GetOrigin()
	array<vector> edgeMids = [
		pos,
		< pos.x + severity, pos.y + severity, pos.z >,
		< pos.x + severity, pos.y - severity, pos.z >,
		< pos.x - severity, pos.y + severity, pos.z >,
		< pos.x - severity, pos.y - severity, pos.z >,
		< pos.x + severity, pos.y, pos.z + severity >,
		< pos.x + severity, pos.y, pos.z - severity >,
		< pos.x - severity, pos.y, pos.z + severity >,
		< pos.x - severity, pos.y, pos.z - severity >,
		< pos.x, pos.y + severity, pos.z + severity >,
		< pos.x, pos.y + severity, pos.z - severity >,
		< pos.x, pos.y - severity, pos.z + severity >,
		< pos.x, pos.y - severity, pos.z - severity >
	]

	foreach( basePos in edgeMids )
		if( FindNearestSafeSpotFaceCenterPointAndPutEntity( ent, basePos, severity ) )
			return
	return FindNearestSafeSpotAndPutEntity( ent, severity + 10, --maxTried )
}

bool function FindNearestSafeSpotFaceCenterPointAndPutEntity( entity ent, vector pos, float severity )
{
	array<vector> faceCenters = [
		< pos.x + severity, pos.y, pos.z >,
		< pos.x - severity, pos.y, pos.z >,
		< pos.x, pos.y + severity, pos.z >,
		< pos.x, pos.y - severity, pos.z >,
		< pos.x, pos.y, pos.z + severity >,
		< pos.x, pos.y, pos.z - severity >
	]

	foreach( origin in faceCenters )
		if( PutEntityInSafeSpot( ent, ent, null, origin, pos ) )
			return true
	return false
}