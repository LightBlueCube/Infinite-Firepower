/*

KsGUI: 100 / OnFadeOut: 90
NuclearBomb: 90.01
PilotShieldDamaged: 93 / OnFadeOut: 90
SkillUsingMessage: 92 / OnFaild: 101 / OnFadeOut: 92
LoadoutTips: 91
AntiAFK: 95
RandMap: 102
AntiInsult: 102

*/

global function HudMessagePriority_Init
global function SendHudMessageWithPriority

table<string, table<string, float> > msgid = {}
table<array<string> > prioritySeq = {}

void function HudMessagePriority_Init()
{
	AddCallback_OnClientConnected( OnClientConnected )
}

void function OnClientConnected( entity player )
{
	msgid[ player.GetUID() ] <- {}
	prioritySeq[ player.GetUID() ] <- []
}

void function SendHudMessageWithPriority( entity player, float priority, var text, float yaw, float pos, vector rgb, vector time, float priorityOnFadeout = 90 )
{
	thread SendHudMessageWithPriority_Threaded( player, GetNewMessageId( player, priority ), string( text ), yaw, pos, rgb, time, priorityOnFadeout )
}

string function GetNewMessageId( entity player, float priority )
{
	int i = 0
	string uid = player.GetUID()
	for( ;; )
	{
		i++
		if( !( string( i ) in msgid[uid] ) )
			break
	}
	string id = string( i )
	msgid[uid][id] <- priority
	return id
}

void function FreeMessageId( entity player, string id )
{
	string uid = player.GetUID()

	prioritySeq[uid].removebyvalue( id )
	delete msgid[uid][id]
}

bool function CanSendMessage( entity player, string id )
{
	string uid = player.GetUID()
	if( prioritySeq[uid].len() == 0 )
		return false
	return prioritySeq[uid][0] == id
}

void function AddMsgToPrioritySeq( entity player, string id )
{
	array<string> tmp = []
	string uid = player.GetUID()
	float priority = msgid[uid][id]

	if( prioritySeq[uid].len() == 0 )
	{
		prioritySeq[uid] = [ id ]
		return
	}
	foreach( i in prioritySeq[uid] )
	{
		if( priority >= msgid[uid][i] && !tmp.contains( id ) )
			tmp.append( id )
		tmp.append( i )
	}
	if( !tmp.contains( id ) )
		tmp.append( id )
	prioritySeq[uid] = tmp
}

void function SendHudMessageWithPriority_Threaded( entity player, string id, string text, float yaw, float pos, vector rgb, vector time, float priorityOnFadeout )
{
	player.EndSignal( "OnDestroy" )

	int tick = int( time.x * 10 )
	vector rgbFadeStart = < 0, 0, 0 >
	vector fadePerTick = < rgb.x / tick, rgb.y / tick, rgb.z / tick >
	AddMsgToPrioritySeq( player, id )

	if( time.x != 0 )
	{
		// fade in
		WhileSendHudMessage( player, id, text, yaw, pos, rgbFadeStart, fadePerTick, tick )
	}

	if( time.y != 0 )
	{
		// show msg
		tick = int( time.y * 10 )
		fadePerTick = < 0, 0, 0 >	// dont do any fade
		WhileSendHudMessage( player, id, text, yaw, pos, rgb, fadePerTick, tick )
	}

	FreeMessageId( player, id )
	if( time.z == 0 )
		return

	id = GetNewMessageId( player, priorityOnFadeout )
	AddMsgToPrioritySeq( player, id )

	// fade out
	tick = int( time.z * 10 )
	rgbFadeStart = rgb
	fadePerTick = < rgb.x / tick, rgb.y / tick, rgb.z / tick >
	fadePerTick *= -1	// do fade out
	WhileSendHudMessage( player, id, text, yaw, pos, rgbFadeStart, fadePerTick, tick )

	FreeMessageId( player, id )
}

void function WhileSendHudMessage( entity player, string id, string text, float yaw, float pos, vector rgb, vector fadePerTick, int tick )
{
	for( int i = tick; i > 0; i-- )
	{
		rgb += fadePerTick
		if( CanSendMessage( player, id ) )
			SendHudMessage( player, text, yaw, pos, int( rgb.x ), int( rgb.y ), int( rgb.z ), 255, 0, 0.2, 0.0 )
		WaitFrame()
	}
}
