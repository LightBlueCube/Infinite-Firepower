global function ChatCommand_Init
global function AddChatCommandCallback
global function RemoveChatCommandCallback
global function SetChatCommandShouldCaseInsensitive

global function AddCallback_OnReceivedSayTextMessage_AfterChatCommand

struct
{
	table<string, bool functionref( entity, array<string> )> chatCommandCallbacks
	array<ClServer_MessageStruct functionref( ClServer_MessageStruct )> afterChatCommandCallbacks

	bool shouldCaseInsensitive = true
}file

void function ChatCommand_Init()
{
	AddCallback_OnReceivedSayTextMessage( OnReceiveChatMessage )
}

void function SetChatCommandShouldCaseInsensitive( bool input )
{
	file.shouldCaseInsensitive = input
}

void function AddChatCommandCallback( string cmd, bool functionref( entity, array<string> ) callbackFunc )
{
	file.chatCommandCallbacks[ cmd ] <- callbackFunc
}

void function RemoveChatCommandCallback( string cmd )
{
	delete file.chatCommandCallbacks[ cmd ]
}

void function AddCallback_OnReceivedSayTextMessage_AfterChatCommand( ClServer_MessageStruct functionref( ClServer_MessageStruct ) callbackFunc )
{
	file.afterChatCommandCallbacks.append( callbackFunc )
}

ClServer_MessageStruct function OnReceiveChatMessage( ClServer_MessageStruct msgStruct )
{
	string message = msgStruct.message
	array<string> splitedMsg = split( message, " " ) // split with white space
	string cmd
	// player can send a chat message without any words (like send a SOH(0x01) or other special stuff)
	if( splitedMsg.len() == 0 )
		cmd = ""
	else
		cmd = splitedMsg[0]

	if( !file.shouldCaseInsensitive )
		cmd = cmd.tolower()

	array<string> args = splitedMsg
	args.removebyvalue( cmd )

	if( cmd in file.chatCommandCallbacks )
	{
		msgStruct.shouldBlock = file.chatCommandCallbacks[ cmd ]( msgStruct.player, args )
		return msgStruct
	}

	foreach( callbackFunc in file.afterChatCommandCallbacks )
	{
		ClServer_MessageStruct returnStruct = callbackFunc( msgStruct )
		msgStruct.message = returnStruct.message
		msgStruct.isTeam = returnStruct.isTeam
		msgStruct.shouldBlock = msgStruct.shouldBlock || returnStruct.shouldBlock
	}

	return msgStruct
}
