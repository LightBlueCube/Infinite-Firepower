global function Music_Init
global function CreateTeamMusicEvent
global function PlayCurrentTeamMusicEventsOnPlayer
global function CreateLevelIntroMusicEvent
global function PlayMusicToCompletion
global function PlayMusicToAll
global function CreateLevelWinnerDeterminedMusicEvent

// modified functions to control music player
global function SetShouldPlayDefaultMusic
global function SetMusicScoreEventPercentage

const int MUSIC_EVENT_UNINITIALIZED = -1


struct MusicEvent
{
	int musicPieceID = MUSIC_EVENT_UNINITIALIZED
	float timeMusicStarted
	bool shouldSeek
}

struct
{
	table< int, MusicEvent > musicEvents

	// default value setting here, modified!
	bool hasPlayedMusic = false
    float musicScoreEventPercentage = 0.6
    bool shouldPlayMusic = false // for there's only certain modes need music, set it to false by default
} file


void function Music_Init()
{
	MusicEvent imcMusicEvent
	MusicEvent militiaMusicEvent
	file.musicEvents[ TEAM_IMC ] <- imcMusicEvent
	file.musicEvents[ TEAM_MILITIA ] <- militiaMusicEvent

	AddCallback_GameStateEnter( eGameState.Prematch, CreateLevelIntroMusicEvent )

	// modified callbacks to control music player
	AddCallback_GameStateEnter( eGameState.Prematch, OnGamePrematch )
    AddCallback_GameStateEnter( eGameState.Playing, OnGameStart )
    AddCallback_OnPlayerKilled( OnPlayerKilled )
}

void function CreateTeamMusicEvent( int team, int musicPieceID, float timeMusicStarted, bool shouldSeek = true )
{
	Assert( !( shouldSeek == false && timeMusicStarted > 0 ), "Don't pass in timeMusicStarted when creating a TeamMusicEvent with shouldSeek set to false!" )

	MusicEvent musicEvent
	musicEvent.musicPieceID  = musicPieceID
	musicEvent.timeMusicStarted = timeMusicStarted
	musicEvent.shouldSeek = shouldSeek

	file.musicEvents[ team ] = musicEvent
}

void function PlayCurrentTeamMusicEventsOnPlayer( entity player )
{
	int team = player.GetTeam()
	MusicEvent musicEvent

	if ( team in file.musicEvents )
		musicEvent = file.musicEvents[ team ]
	else
		musicEvent = file.musicEvents[ TEAM_MILITIA ] //This normally means we're in FFA. Fine to failsafe to use any music event

	if ( musicEvent.musicPieceID == MUSIC_EVENT_UNINITIALIZED ) //No current music event
		return

	Remote_CallFunction_NonReplay( player, "ServerCallback_PlayTeamMusicEvent", musicEvent.musicPieceID, musicEvent.timeMusicStarted, musicEvent.shouldSeek )
}

void function CreateLevelIntroMusicEvent()
{
	//printt( "Creating LevelIntroMusicEvent" )
	CreateTeamMusicEvent( TEAM_IMC, eMusicPieceID.LEVEL_INTRO, Time() )
	CreateTeamMusicEvent( TEAM_MILITIA, eMusicPieceID.LEVEL_INTRO, Time() )
}

void function PlayMusicToCompletion( int musicID )
{
	array<entity> players = GetPlayerArray()
	foreach ( entity player in players )
	{
		Remote_CallFunction_NonReplay( player, "ServerCallback_PlayMusicToCompletion", musicID )
	}
}

void function PlayMusicToAll( int musicID )
{
	array<entity> players = GetPlayerArray()
	foreach ( entity player in players )
	{
		Remote_CallFunction_NonReplay( player, "ServerCallback_PlayMusic", musicID )
	}
}

void function CreateLevelWinnerDeterminedMusicEvent()
{
	//printt( "Creating CreateLevelWinnerDeterminedMusicEvent" )
	if ( IsFFAGame() )
		return

	int winningTeam = GetWinningTeam()

	if ( winningTeam )
	{
		int losingTeam = GetOtherTeam( winningTeam )
		CreateTeamMusicEvent( winningTeam, eMusicPieceID.LEVEL_WIN, Time() )
		CreateTeamMusicEvent( losingTeam, eMusicPieceID.LEVEL_LOSS, Time() )
	}
	else
	{
		CreateTeamMusicEvent( TEAM_MILITIA, eMusicPieceID.LEVEL_DRAW, Time() )
		CreateTeamMusicEvent( TEAM_IMC, eMusicPieceID.LEVEL_DRAW, Time() )
	}
}

// modified functions for default music
void function SetShouldPlayDefaultMusic( bool should )
{
    file.shouldPlayMusic = should
}

void function SetMusicScoreEventPercentage( float percentage )
{
    file.musicScoreEventPercentage = percentage
}

void function OnGamePrematch()
{

}

void function OnPlayerKilled( entity victim, entity attacker, var damageInfo )
{
	if( !GamePlayingOrSuddenDeath() ) // prevent prematch cleanups mess music up
		return
    if( file.shouldPlayMusic )
	    MusicPlayScoreEvent()
}

void function OnGameStart()
{
    if( file.shouldPlayMusic )
		MusicPlayNormal()
}

void function MusicPlayScoreEvent()
{
	if( file.hasPlayedMusic )
		return

	int score = GameMode_GetScoreLimit( GameRules_GetGameMode() )

	if( IsFFAGame() ) // temp no need in ffa
		return

	if( GameRules_GetTeamScore( TEAM_MILITIA ) >= score * file.musicScoreEventPercentage || GameRules_GetTeamScore( TEAM_IMC ) >= score * file.musicScoreEventPercentage )
	{
		CreateTeamMusicEvent( TEAM_IMC, eMusicPieceID.GAMEMODE_1, Time() )
		CreateTeamMusicEvent( TEAM_MILITIA, eMusicPieceID.GAMEMODE_1, Time() )
		foreach( entity player in GetPlayerArray() )
			PlayCurrentTeamMusicEventsOnPlayer( player )
		file.hasPlayedMusic = true
	}
}

// hardcoded for now!!
void function MusicPlayNormal()
{
	thread MusicPlayThink()
}

void function MusicPlayThink()
{
	svGlobal.levelEnt.EndSignal( "GameStateChanged" )

	float totalTime = float( GameMode_GetTimeLimit( GAMETYPE ) * 60 )
	if( IsRoundBased() )
	{
		totalTime = GameMode_GetRoundTimeLimit( GAMETYPE ) * 60
	}
	// hardcoding here
	/*if( IsSwitchSidesBased_NorthStar() )
	{
		totalTime *= 0.5
		if( !HasSwitchedSides() ) // hasn't swiching sides
			return
	}*/
	//print( "[Music Player] Total Time is: " + string( totalTime ) )
	float almostDoneWaitTime = -1
	float lastMinuteWaitTime = -1

	// checking totalTime..
	if( totalTime >= 720 )
	{
		almostDoneWaitTime = totalTime*0.6
		lastMinuteWaitTime = totalTime*0.4-60
	}
	else if( totalTime >= 600 )
	{
		almostDoneWaitTime = totalTime*0.5
		lastMinuteWaitTime = totalTime*0.5-60
	}
	else if( totalTime >= 480 )
	{
		almostDoneWaitTime = totalTime*0.4
		lastMinuteWaitTime = totalTime*0.6-60
	}
	else if( totalTime >= 360 )
	{
		almostDoneWaitTime = totalTime*0.3
		lastMinuteWaitTime = totalTime*0.7-60
	}
	else if( totalTime >= 240 )
	{
		almostDoneWaitTime = totalTime*0.2
		lastMinuteWaitTime = totalTime*0.8-60 // what I'm doing here, why this always plays so early?
	}
	else if( totalTime >= 120 )
	{
		lastMinuteWaitTime = totalTime-60
	}
	else // too short per round to have music
		return

	if( almostDoneWaitTime != -1 )
		wait almostDoneWaitTime

	if( !file.hasPlayedMusic )
	{
		CreateTeamMusicEvent( TEAM_IMC, eMusicPieceID.GAMEMODE_1, Time() )
		CreateTeamMusicEvent( TEAM_MILITIA, eMusicPieceID.GAMEMODE_1, Time() )
		foreach( entity player in GetPlayerArray() )
			PlayCurrentTeamMusicEventsOnPlayer( player )
		file.hasPlayedMusic = true
	}

	if( lastMinuteWaitTime != -1 )
		wait lastMinuteWaitTime

	CreateTeamMusicEvent( TEAM_IMC, eMusicPieceID.LEVEL_LAST_MINUTE, Time() )
	CreateTeamMusicEvent( TEAM_MILITIA, eMusicPieceID.LEVEL_LAST_MINUTE, Time() )
	foreach( entity player in GetPlayerArray() )
		PlayCurrentTeamMusicEventsOnPlayer( player )
}

entity function GetWinningPlayer()
{
	entity bestplayer

	foreach ( entity player in GetPlayerArray() )
	{
		if( bestplayer == null )
			bestplayer = player

		if( GameRules_GetTeamScore( player.GetTeam() ) > GameRules_GetTeamScore( bestplayer.GetTeam() ) )
			bestplayer = player
	}

	return bestplayer
}
