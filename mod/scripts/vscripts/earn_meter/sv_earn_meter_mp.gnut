untyped
global function Sv_EarnMeterMP_Init
global function EarnMeterMP_SetTitanLoadout
global function EarnMeterMP_SetPassiveMeterGainEnabled
global function EarnMeterMP_SetBoostByRef

// modified settings...
global function EarnMeterMP_SetPassiveGainProgessEnable

const float EARNMETER_GAIN_FRAC				= 0.01
const float EARNMETER_GAIN_INTERVAL			= 5.0
const float EARNMETER_GAIN_INTERVAL_MIN		= 2.0
const float EARNMETER_GAIN_MAX_LEVEL		= 0.8 // if score or time reaches this percentage, we will use EARNMETER_GAIN_INTERVAL_MIN

struct 
{
	array<string> catchedUpUIDs

	float playingStartTime
	bool passiveMeterGainEnabled = true

	// modified settings...
	float passiveMeterGainInterval = EARNMETER_GAIN_INTERVAL
	bool passiveGainProgressEnabled = true // like vanilla
} file

void function Sv_EarnMeterMP_Init()
{
	if ( !EARNMETER_ENABLED )
		return

	AddCallback_OnClientConnected( SetupPlayerEarnMeter )
	AddCallback_GameStateEnter( eGameState.Playing, OnPlaying ) // can't change boost after prematch
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
}

void function EarnMeterMP_SetTitanLoadout( entity player )
{
	if ( EarnMeterMP_IsTitanEarnGametype() )
		PlayerEarnMeter_SetGoal( player, EarnObject_GetByRef( GetTitanLoadoutForPlayer( player ).titanClass ) )
	else
		PlayerEarnMeter_SetGoal( player, PlayerEarnMeter_GetReward( player ) )
}

// modified settings...
void function EarnMeterMP_SetPassiveMeterGainEnabled( bool enabled )
{
	file.passiveMeterGainEnabled = enabled
}

void function EarnMeterMP_SetPassiveGainProgessEnable( bool enabled )
{
	file.passiveGainProgressEnabled = enabled
}
//

void function SetupPlayerEarnMeter( entity player )
{
	PlayerEarnMeter_Reset( player )

	string burncardRef = GetSelectedBurnCardRef( player )
	EarnMeterMP_SetBoostByRef( player, burncardRef )

	// catchup bonus for late joiners
	// todo: maths on this is fine but for some reason it won't set correctly, could be getting reset somewhere?
	thread DelayedCatchUpEarnMeter( player ) // trying to do this
	// PlayerEarnMeter_AddOwnedFrac( player, ( ( Time() - file.playingStartTime ) / 4.0 ) * 0.01 )
}

void function DelayedCatchUpEarnMeter( entity player )
{
	WaitFrame()
	if( IsValid( player ) && !file.catchedUpUIDs.contains( player.GetUID() ) )
	{
		PlayerEarnMeter_AddOwnedFrac( player, ( ( Time() - file.playingStartTime ) / EARNMETER_GAIN_INTERVAL ) * EARNMETER_GAIN_FRAC )
		file.catchedUpUIDs.append( player.GetUID() ) // for northstar, only catch up earnmeters once
	}
}

void function OnPlaying()
{
	file.playingStartTime = Time()
	foreach ( entity player in GetPlayerArray() )
		SetupPlayerEarnMeter( player )

	if ( Riff_BoostAvailability() != eBoostAvailability.Disabled )
		SetCallback_EarnMeterRewardEarned( EarnMeterMP_BoostEarned )

	// do this in playing so that gamemodes/maps can disable and this'll take affect
	if ( EarnMeterMP_IsTitanEarnGametype() ) // settitanavailable when earnmeter full
	{
		Riff_ForceTitanAvailability( eTitanAvailability.Custom ) // doesn't seem to affect anything aside from preventing some annoying client stuff
		svGlobal.titanAvailabilityCheck = IsTitanAvailable
	}

	SetCallback_EarnMeterGoalEarned( EarnMeterMP_TitanEarned )

	// progress earnmeter frac
	thread EarnMeterMP_ProgessFracCalculate()
}

void function OnPlayerRespawned( entity player )
{
	thread EarnMeterMP_PlayerLifeThink( player )

	if ( PlayerEarnMeter_IsRewardAvailable( player ) )
		EarnMeterMP_BoostEarned( player )
}

void function EarnMeterMP_ReplaceReward( entity player, EarnObject reward, float rewardFrac )
{
	PlayerEarnMeter_Reset( player )
	if ( reward.id < 0 )
		return
	PlayerEarnMeter_SetReward( player, reward )
	PlayerEarnMeter_SetRewardFrac( player, rewardFrac )

	if( PlayerEarnMeter_GetRewardFrac( player ) != 0 )
		PlayerEarnMeter_EnableReward( player )
}

void function EarnMeterMP_PlayerLifeThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	EarnObject pilotReward = PlayerEarnMeter_GetReward( player ) 
	float pilotRewardFrac = PlayerEarnMeter_GetRewardFrac( player )
	int lastEarnMeterMode = PlayerEarnMeter_GetMode( player )
	float lastPassiveGainTime = Time()

	// on respawn: If titan avaliable and we're nearly reach it, do a dialogue
	TryTitanSoonAnnouncement( player )

	OnThreadEnd(
		function() : ( player, pilotReward, pilotRewardFrac )
		{
			if ( !IsValid( player ) )
				return

			// Resets the meter to the pilot version if the player dies in a titan or while their titan is alive (otherwise they can be stuck with e-smoke)
			int earnMode = PlayerEarnMeter_GetMode( player )
			if( earnMode != eEarnMeterMode.DEFAULT )
				EarnMeterMP_ReplaceReward( player, pilotReward, pilotRewardFrac )
		}
	)

	while ( true )
	{
		if( GetGameState() < eGameState.Playing ) // Prematch
			lastPassiveGainTime = Time()
		
		int desiredEarnMeterMode
		entity soul = player.GetTitanSoul() // move out of if-else cases

		if ( player.IsTitan() )
		{
			lastPassiveGainTime = Time() // staying in titan should reset earnmeter gain timer
			
			if ( IsValid( soul ) ) // stupid anti-crash, possibly no need
			{
				//entity soul = player.GetTitanSoul() // move out of if-else cases
				if ( SoulTitanCore_GetExpireTime( soul ) > Time() )
					desiredEarnMeterMode = eEarnMeterMode.CORE_ACTIVE
				else
					desiredEarnMeterMode = eEarnMeterMode.CORE
			}
		}
		else if ( IsValid( player.GetPetTitan() ) )
			desiredEarnMeterMode = eEarnMeterMode.PET
		else
			desiredEarnMeterMode = eEarnMeterMode.DEFAULT

		if ( desiredEarnMeterMode != lastEarnMeterMode )
		{
			PlayerEarnMeter_SetMode( player, desiredEarnMeterMode )
			if ( lastEarnMeterMode == eEarnMeterMode.DEFAULT ) // Set these here in case the player changed boost during the match (e.g. in dropship)
			{
				pilotReward = PlayerEarnMeter_GetReward( player ) 
				pilotRewardFrac = PlayerEarnMeter_GetRewardFrac( player )
			}

			if ( desiredEarnMeterMode == eEarnMeterMode.DEFAULT ) // Only occurs when auto titan dies. Resets reward progress and reverts it back to boost.
				EarnMeterMP_ReplaceReward( player, pilotReward, pilotRewardFrac )
			else if ( desiredEarnMeterMode == eEarnMeterMode.CORE ) // Replace the pilot's earn meter reward with smoke when they enter their titan.
			{
				EarnMeterMP_ReplaceReward( player, EarnObject_GetByRef( "core_electric_smoke" ), CORE_SMOKE_FRAC )
				//if( SoulTitanCore_GetNextAvailableTime( player.GetTitanSoul() ) >= CORE_SMOKE_FRAC )
				if ( IsValid( soul ) ) // stupid anti-crash, possibly no need
				{
					// modified here: if titan being disabled reward, we remove their smoke icon
					if( SoulTitanCore_GetNextAvailableTime( soul ) >= CORE_SMOKE_FRAC || !PlayerEarnMeter_GetSoulEarnMeterSmokeEnabled( soul ) )
						PlayerEarnMeter_SetRewardUsed( player )
				}
			}
			else if ( desiredEarnMeterMode == eEarnMeterMode.CORE_ACTIVE ) // Enables smoke after core use (doesn't show up during active, so looks fine)
			{
				// shouldn't show electric smoke icon if titan has PAS_HYPER_CORE, but whatever I don't want to fix it
				// this is a vanilla bug... weird
				// now tried to fix it in sh_titancore_utility.gnut, call a PlayerEarnMeter_SetRewardUsed() after core use
				PlayerEarnMeter_EnableReward( player )
			}

			lastEarnMeterMode = desiredEarnMeterMode
		}

		if ( lastEarnMeterMode == eEarnMeterMode.DEFAULT )
		{
			if ( PlayerEarnMeter_GetOwnedFrac( player ) < 1.0 )
				PlayerEarnMeter_DisableGoal( player )
			else if ( player.GetPlayerNetInt( "goalState" ) != eRewardState.UNAVAILABLE )
			{
				// if goal is enabled then the client will show "titan ready" alerts even if it isn't
				// the problem is that if the goal isn't available when we fill the earnmeter, then it won't make it available
				// so unfortunately we have to do this manually
				player.SetPlayerNetInt( "goalState", eRewardState.AVAILABLE )
				PlayerEarnMeter_RefreshGoal( player )
			}

			if ( Time() - lastPassiveGainTime >= file.passiveMeterGainInterval && file.passiveMeterGainEnabled ) // this might be 5.0
			{
				lastPassiveGainTime = Time()
				PlayerEarnMeter_AddOwnedFrac( player, EARNMETER_GAIN_FRAC )
			}
		}

		WaitFrame()
	}
}

void function TryTitanSoonAnnouncement( entity player )
{
	//WaitFrame() // required for sometimes player try "RespawnAsTitan()", was fixed inside it
	if( !IsValid( player ) )
		return
	if( ShouldDoTitanSoonAnnouncement( player ) )
	{
		//print( "doing titan soon announcement" )
		PlayFactionDialogueToPlayer( "mp_titanSoon", player )
	}
}

bool function ShouldDoTitanSoonAnnouncement( entity player )
{
	if( 
		EarnMeterMP_IsTitanEarnGametype() && 
		PlayerEarnMeter_GetOwnedFrac( player ) >= 0.8 && 
		!IsTitanAvailable( player ) && 
		!player.IsTitan() && 
		!IsValid( player.GetPetTitan() ) &&
		GetGameState() == eGameState.Playing
	  )
		return true

	return false
}

void function EarnMeterMP_BoostEarned( entity player )
{
	// Can't have smoke earned via meter. Otherwise, Auto Titan could hit reward frac and get nothing
	if( player.IsTitan() )
		return

	EarnObject earnobject = PlayerEarnMeter_GetReward( player )
	BurnReward burncard = BurnReward_GetByRef( earnobject.ref )

	while ( burncard.ref == "burnmeter_random_foil" )
		burncard = BurnReward_GetRandom()

	// rework northstar complicated checks. why don't we just get reward count before applying?
	int rewardCount = BurnMeter_GetLimitedRewardCount( player, burncard.ref )
	//for ( int i = 0; i < BurnMeter_GetLimitedRewardCount( player, burncard.ref ); i++ )
	for ( int i = 0; i < rewardCount; i++ )
		BurnMeter_GiveRewardDirect( player, burncard.ref )

	PlayerEarnMeter_DisableReward( player )
}

void function EarnMeterMP_TitanEarned( entity player )
{
	if ( EarnMeterMP_IsTitanEarnGametype() )
	{
		if( !player.IsTitan() && !IsValid( player.GetPetTitan() ) && !IsTitanAvailable( player ) ) // sometimes trigger this when "Respawn As Titan", should do a check.
		{
			SetTitanAvailable( player )
			Remote_CallFunction_Replay( player, "ServerCallback_TitanReadyMessage" ) // broken for some reason
		}
	}
	else
	{
		float oldRewardFrac = PlayerEarnMeter_GetRewardFrac( player )
		PlayerEarnMeter_Reset( player )
		PlayerEarnMeter_SetRewardFrac( player, oldRewardFrac )
		PlayerEarnMeter_EnableReward( player )

		if ( PlayerEarnMeter_GetRewardFrac( player ) != 0 )
			PlayerEarnMeter_EnableReward( player )
	}
}

void function EarnMeterMP_SetBoostByRef( entity player, string boostRef ) 
{
	EarnObject earnobject = EarnObject_GetByRef( boostRef )
	BurnReward burncard = BurnReward_GetByRef( boostRef )

	if ( Riff_BoostAvailability() != eBoostAvailability.Disabled )
	{
		PlayerEarnMeter_SetReward( player, earnobject ) // pretty sure this works?
		PlayerEarnMeter_SetRewardFrac( player, burncard.cost )
		PlayerEarnMeter_EnableReward( player )
	}

	if ( EarnMeterMP_IsTitanEarnGametype() )
	{
		PlayerEarnMeter_SetGoal( player, EarnObject_GetByRef( GetTitanLoadoutForPlayer( player ).titanClass ) )
		PlayerEarnMeter_EnableGoal( player ) // prevents goalstate from being set incorrectly
	}
	else
		PlayerEarnMeter_SetGoal( player, earnobject )
}

// progressFrac calculate, no support for roundbased mode
void function EarnMeterMP_ProgessFracCalculate()
{
	if ( IsRoundBased() )
		return

	// progressFrac calculate
	while ( GetGameState() == eGameState.Playing )
	{
		float startTime = file.playingStartTime
		// could cache these, but what if we update it midgame?
		float endTime = expect float( GetServerVar( "gameEndTime" ) )
		//if( IsSwitchSidesBased() ) // this has already being calculated in gamestate_mp, don't do it again
		//	endTime /= 2
			
		float totalTime = endTime - startTime
		float maxLevelTime = totalTime * EARNMETER_GAIN_MAX_LEVEL
		
		int totalScore = GameMode_GetScoreLimit( GAMETYPE )
		if( IsRoundBased() )
			totalScore = GameMode_GetRoundScoreLimit( GAMETYPE )
		int maxLevelScore = int( totalScore * EARNMETER_GAIN_MAX_LEVEL )

		// base frac based on gameTime
		float timeElapsed = Time() - startTime
		float timeLevel = timeElapsed / maxLevelTime
		
		// calculate again based on team scores
		float scoreLevel = 0.0
		if ( !IsSwitchSidesBased() ) // we don't do scoreLevel in switchSideBased modes
		{
			int winningTeam = GetWinningTeamWithFFASupport() // GetWinningTeam() won't be set up if match hasn't end yet
			if ( winningTeam < TEAM_UNASSIGNED ) // no valid winner
				winningTeam = TEAM_UNASSIGNED
			int highestScore = GameRules_GetTeamScore( winningTeam )

			scoreLevel = float( highestScore ) / float( maxLevelScore )
		}

		// get max level
		float gainLevel = max( timeLevel, scoreLevel )
		if ( gainLevel >= 1.0 )
			gainLevel = 1.0
		//print( "gainLevel: " + string( gainLevel ) )
		// get max time reduction
		float maxIntervalReduction = EARNMETER_GAIN_INTERVAL - EARNMETER_GAIN_INTERVAL_MIN

		if( file.passiveGainProgressEnabled )
			file.passiveMeterGainInterval = EARNMETER_GAIN_INTERVAL - ( maxIntervalReduction * gainLevel )
		//print( "passiveMeterGainInterval: " + string( file.passiveMeterGainInterval ) )
		WaitFrame()
	}
}