untyped

global function ClassicRodeo_InitPlaylistVars

#if SERVER
global function CreateClassicRodeoWeakpoint

// handling hardcoded nerf!
const array<int> ELECTRIC_SMOKE_DAMAGESOURCES = [ eDamageSourceId.mp_titanability_smoke,
												  eDamageSourceId.mp_weapon_satchel,
									 			  eDamageSourceId.mp_weapon_grenade_electric_smoke ]

struct
{
	float classicRodeoAdditionalDamage = 1 // default additional damage value, should make it changable through playlistVars
} file
#endif


const asset RODEO_WEAKPOINT_HITBOX_MODEL = $"models/weapons/bullets/triple_threat_projectile.mdl" // $"models/Weapons/ammoboxes/backpack_single.mdl" // this one's too big, will block many damages

void function ClassicRodeo_InitPlaylistVars()
{
	AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_TITAN", "classic_rodeo", [ "#SETTING_DISABLED", "#SETTING_ENABLED" ], "0" )
#if SERVER
	PrecacheModel( RODEO_WEAKPOINT_HITBOX_MODEL )
#endif
}

#if SERVER

// UTILITY
entity function CreateClassicRodeoWeakpoint( entity player, entity titan )
{
	entity weakpoint = CreatePropScript( RODEO_WEAKPOINT_HITBOX_MODEL )//
	weakpoint.SetParent( titan, "RODEO_BATTERY" )
	weakpoint.SetLocalOrigin( < 0, -4, 0 > ) // < 0, 0, 0 > for ammobox
	weakpoint.SetLocalAngles( < 90, -90, 0 > )
	weakpoint.SetTakeDamageType( DAMAGE_YES )
	SetTeam( weakpoint, TEAM_UNASSIGNED )
	SetObjectCanBeMeleed( weakpoint, false )
	weakpoint.kv.solid = 6
	weakpoint.Hide()

	entity titanSoul = titan.GetTitanSoul()
	// stryder ones don't really work in the default position, so change it
	// note: stryders are way too easy to hit because of this lol so possibly fuck with it
	if ( GetSoulTitanSubClass( titanSoul ) == "stryder" )
		weakpoint.SetLocalOrigin( < 0, -4, -2 > ) // < 0, 4, -4 > for ammobox

	weakpoint.s.pilot <- player
	weakpoint.s.titanSoul <- titanSoul

	AddEntityCallback_OnDamaged( weakpoint, OnRodeoWeakpointDamaged )

	return weakpoint
}

void function OnRodeoWeakpointDamaged( entity weakpoint, var damageInfo )
{
	DamageInfo_SetDamage( damageInfo, 0 ) // make sure weakpoint ent doesn't die ever
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if( attacker != weakpoint.s.pilot ) // avoid things like reapers trigger following things
		return
	entity titanSoul = attacker.GetTitanSoulBeingRodeoed()
	if( !IsValid( titanSoul ) )
		return
	entity titan = titanSoul.GetTitan() // real titan
	if( !IsValid( titan ) )
		return
	float damageAmount = DamageInfo_GetDamage( damageInfo )
	if ( titanSoul != weakpoint.s.titanSoul )
		return

	// figure out damage to deal to titan
	entity attackerWeapon = DamageInfo_GetWeapon( damageInfo )
	if ( !IsValid( attackerWeapon ) )
		attackerWeapon = attacker.GetActiveWeapon()

	// most weapons in ttf2 don't have damage_rodeo, let's use it's damage_near_value_titanarmor
	int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	entity inflictor = DamageInfo_GetInflictor( damageInfo )
	int rodeoDamage = attackerWeapon.GetWeaponSettingInt( eWeaponVar.damage_near_value_titanarmor )

	float classicRodeoAdditionalDamage = file.classicRodeoAdditionalDamage

	// not using these check now, since we have done hitbox changes, grenadiers can cause really high damage to player themselves
	//bool canNormallyDamage = attackerWeapon.GetWeaponSettingBool( eWeaponVar.titanarmor_critical_hit_required )
	//if( canNormallyDamage )
	//	shouldMultiplyDamage = false

	// can't get right condition
	//if( attackerWeapon.GetWeaponType() == WT_ANTITITAN ) // antiTitan weapons such as defender, can deal so much damage, so don't multiply it
	//	shouldMultiplyDamage = false


	string weaponName
	if( IsValid( attackerWeapon ) )
		weaponName = attackerWeapon.GetWeaponClassName()

	float bullet = 1.2 * attackerWeapon.GetWeaponSettingFloat( eWeaponVar.fire_rate )
	rodeoDamage = int( 15000 / bullet )

	if( ELECTRIC_SMOKE_DAMAGESOURCES.contains( damageSourceID ) ) // hardcoded here
	{
		return // don't do additional damage for smokes
		//rodeoDamage = 300 // electric smoke grenade's damage per tick
		//shouldMultiplyDamage = false
	}

	if( IsValid( titanSoul ) )
		if( titanSoul.IsDoomed() )
			classicRodeoAdditionalDamage = classicRodeoAdditionalDamage / 2

	if( weaponName == "mp_weapon_arc_launcher" || weaponName == "mp_weapon_epg" || weaponName == "mp_weapon_esaw" )
		classicRodeoAdditionalDamage = classicRodeoAdditionalDamage / 4
	if( weaponName == "mp_weapon_softball" || weaponName == "mp_weapon_mastiff" )
		classicRodeoAdditionalDamage = classicRodeoAdditionalDamage / 3
	if( weaponName == "mp_weapon_sniper" || weaponName == "mp_weapon_smr" || weaponName == "mp_weapon_shotgun" || weaponName == "mp_weapon_wingman" || weaponName == "mp_weapon_wingman_n" || weaponName == "mp_weapon_shotgun_pistol" || weaponName == "mp_weapon_doubletake" || weaponName == "mp_weapon_dmr" )
		classicRodeoAdditionalDamage = classicRodeoAdditionalDamage / 2
	if( weaponName == "mp_weapon_g2" )
		classicRodeoAdditionalDamage = classicRodeoAdditionalDamage / 1.5
	if( weaponName == "mp_weapon_defender" )
	{
		rodeoDamage = 9800
		if( attackerWeapon.HasMod( "quick_charge" ) )
			rodeoDamage = 3200
	}
	if( damageSourceID == eDamageSourceId.mp_weapon_frag_grenade || damageSourceID == eDamageSourceId.mp_weapon_grenade_gravity || damageSourceID == eDamageSourceId.mp_weapon_grenade_sonar || damageSourceID == eDamageSourceId.mp_weapon_thermite_grenade )
		classicRodeoAdditionalDamage = classicRodeoAdditionalDamage / 2

	rodeoDamage = int( rodeoDamage * classicRodeoAdditionalDamage ) // no additional damage based on criticalScale

	//print( file.classicRodeoAdditionalDamage )
	//print( rodeoDamage )
	// damage titanSoul, make sure DF_BYPASS_SHIELD	is a thing for proper behaviour. DF_RODEO is added in CheckRodeoRiderHitsTitan() so no need to add again.
	titan.TakeDamage( rodeoDamage, attacker, attackerWeapon, { damageSourceId = eDamageSourceId.rodeo, scriptType = DamageInfo_GetCustomDamageType( damageInfo ) | DF_BYPASS_SHIELD | DF_CRITICAL } )

	// hitmarker, automatically triggered by "target.TakeDamage()"
	//attacker.NotifyDidDamage( weakpoint, DamageInfo_GetHitBox( damageInfo ), DamageInfo_GetDamagePosition( damageInfo ), DamageInfo_GetCustomDamageType( damageInfo ) | DF_CRITICAL, rodeoDamage, DamageInfo_GetDamageFlags( damageInfo ), DamageInfo_GetHitGroup( damageInfo ), DamageInfo_GetWeapon( damageInfo ), DamageInfo_GetDistFromAttackOrigin( damageInfo ) )
}
#endif