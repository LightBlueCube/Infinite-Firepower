untyped

global function ClassicRodeo_InitPlaylistVars

// default value
const float CLASSIC_RODEO_DEFAULT_DAMAGE_SCALE = 1.0

// shared utility
global function ClassicRodeo_SetEnabled
global function ClassicRodeo_IsEnabled

#if SERVER
global function ClassicRodeo_SetRodeoAttackDamageScale

global function CreateClassicRodeoWeakpoint

// callbacks
global function AddCallback_ClassicRodeo_WeakpointTitanDamaged

// debug
const bool CLASSIC_RODEO_WEAKPOINT_DEBUG = false

// settings
const float RODEO_WEAKPOINT_DAMAGE_STATE_REQUIRED_SEGMENT_HEALTH = 0.5 // if a titan's segmented health is damaged by this percentage, we create panel damaged effect
const asset RODEO_WEAKPOINT_HITBOX_MODEL = $"models/weapons/bullets/triple_threat_projectile.mdl" // $"models/Weapons/ammoboxes/backpack_single.mdl" // this one's too big, will block many damages
#endif

struct
{
	// settings
	bool classicRodeoEnabled = true
	float classicRodeoAdditionalDamage = CLASSIC_RODEO_DEFAULT_DAMAGE_SCALE // default additional damage value, should make it changable through playlistVars
	// callbacks
	array<void functionref( entity, var )> weakpointTitanDamagedCallbacks

	// in-file variable
	bool isWeakpointDamage = false // for OnWeakpointAttachedTitanDamaged() handle damage
} file

void function ClassicRodeo_InitPlaylistVars()
{
	AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_TITAN", "classic_rodeo", [ "#SETTING_DISABLED", "#SETTING_ENABLED" ], "0" )
	// new adding: damage settings
	AddPrivateMatchModeSettingArbitrary( "#MODE_SETTING_CATEGORY_TITAN", "classic_rodeo_damage_scale", CLASSIC_RODEO_DEFAULT_DAMAGE_SCALE.tostring() )

#if SERVER
	PrecacheModel( RODEO_WEAKPOINT_HITBOX_MODEL )

	// modified callbacks
	AddBatteryHealCallback( ClassicRodeoBatteryHeal )
	AddCallback_OnBatteryRemovalDamage( ClassicRodeoBatteryRemovalDamage )
#endif
}

#if SERVER
void function ClassicRodeo_SetRodeoAttackDamageScale( float scale )
{
	file.classicRodeoAdditionalDamage = scale
}

// UTILITY
entity function CreateClassicRodeoWeakpoint( entity player, entity titan )
{
	// now changing to script_mover so they won't have sticky entities( which parented to them and gets destroyed together )
	//entity weakpoint = CreatePropScript( RODEO_WEAKPOINT_HITBOX_MODEL )//
	entity weakpoint = CreateEntity( "script_mover" )
	weakpoint.SetValueForModelKey( RODEO_WEAKPOINT_HITBOX_MODEL )
	DispatchSpawn( weakpoint )
	weakpoint.SetModel( RODEO_WEAKPOINT_HITBOX_MODEL )

	weakpoint.SetParent( titan, "RODEO_BATTERY" )
	weakpoint.SetLocalOrigin( < 0, -4, 0 > ) // < 0, 0, 0 > for ammobox
	weakpoint.SetLocalAngles( < 90, -90, 0 > )
	weakpoint.SetTakeDamageType( DAMAGE_YES )

	// setup
	SetTeam( weakpoint, TEAM_UNASSIGNED )
	SetVisibleEntitiesInConeQueriableEnabled( weakpoint, true ) // allow shotgun pellets to find it
	SetObjectCanBeMeleed( weakpoint, false )
	weakpoint.SetPassThroughThickness( 1024 ) // almost prevent every weapon from passing through

	weakpoint.kv.solid = SOLID_HITBOXES
	weakpoint.Hide()

	// setup health, avoid it sometimes disappear once and make player unable to land shots
	weakpoint.SetMaxHealth( 10000 )
	weakpoint.SetHealth( 10000 )

	// set armor type correctly so we don't need to figure out damage
	weakpoint.SetArmorType( ARMOR_TYPE_HEAVY )
	SetCustomSmartAmmoTarget( weakpoint, false )

	// debug
	#if CLASSIC_RODEO_WEAKPOINT_DEBUG
		weakpoint.Show()
	#endif // CLASSIC_RODEO_WEAKPOINT_DEBUG

	entity titanSoul = titan.GetTitanSoul()
	// tweak on weakpoint position
	switch ( GetSoulTitanSubClass( titanSoul ) )
	{
		case "stryder":
			weakpoint.SetLocalOrigin( < 0, -4, -2 > ) // < 0, 4, -4 > for ammobox
			break
		case "ogre":
			weakpoint.SetLocalOrigin( < 0, -7, 0 > )
			break
	}

	weakpoint.s.pilot <- player
	weakpoint.s.titanSoul <- titanSoul

	AddEntityCallback_OnPostDamaged( weakpoint, OnRodeoWeakpointPostDamaged )
	thread HandleWeakpointAttachedTitanDamage( weakpoint, titan )

	return weakpoint
}

void function OnRodeoWeakpointPostDamaged( entity weakpoint, var damageInfo )
{
	DamageInfo_SetDamage( damageInfo, 0 ) // make sure weakpoint ent doesn't die ever

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( !IsValid( attacker ) || attacker != weakpoint.s.pilot )
		return
	entity titanSoul = attacker.GetTitanSoulBeingRodeoed()
	if ( !IsValid( titanSoul ) || titanSoul != weakpoint.s.titanSoul )
		return
	entity titan = titanSoul.GetTitan() // real titan
	if ( !IsValid( titan ) )
		return
	float criticalScale = 1.0
	entity attackerWeapon = DamageInfo_GetWeapon( damageInfo )
	entity inflictor = DamageInfo_GetInflictor( damageInfo )

	if ( !IsValid( attackerWeapon ) && IsValid( inflictor ) && inflictor.IsPlayer() ) // damaged by hitscan radius damage
		attackerWeapon = inflictor.GetActiveWeapon()

	if( inflictor.IsProjectile() )
	{
		string name = inflictor.ProjectileGetWeaponClassName()
		foreach( weapons in [ attacker.GetMainWeapons(), attacker.GetOffhandWeapons() ] )
		{
			foreach( weapon in weapons )
			{
				if( weapon.GetWeaponClassName() != name )
					continue
				attackerWeapon = weapon
				break
			}

			if( IsValid( attackerWeapon ) )
				break
		}
	}

	if ( !IsValid( attackerWeapon ) )
		return

	int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	string weaponName = attackerWeapon.GetWeaponClassName()

	float targetTime = 2.0
	float targetHealth = 15000
	float bulletCount = targetTime * attackerWeapon.GetWeaponSettingFloat( eWeaponVar.fire_rate )
	float rodeoDamage = targetHealth / bulletCount

	if( [ "mp_weapon_defender" ].contains( weaponName ) )
		rodeoDamage = targetHealth / ( targetTime * ( 1 / attackerWeapon.GetWeaponSettingFloat( eWeaponVar.charge_time ) ) )
	if( [ "mp_weapon_hemlok", "mp_weapon_pulse_lmg", "mp_weapon_mgl" ].contains( weaponName ) )
	{
		float burst_fire_count = float( expect int( attackerWeapon.GetWeaponInfoFileKeyField( "burst_fire_count" ) ) )
		float wait_count = burst_fire_count - 1
		float burst_fire_delay = expect float( attackerWeapon.GetWeaponInfoFileKeyField( "burst_fire_delay" ) )
		float fire_rate = attackerWeapon.GetWeaponSettingFloat( eWeaponVar.fire_rate )
		if( [ "mp_weapon_pulse_lmg" ].contains( weaponName ) )
			burst_fire_delay += attackerWeapon.GetWeaponSettingFloat( eWeaponVar.charge_time )
		float real_fire_rate = ( fire_rate * wait_count + burst_fire_delay ) / burst_fire_count
		rodeoDamage = targetHealth / ( targetTime * real_fire_rate )
	}

	if( [ "mp_weapon_mastiff" ].contains( weaponName ) )
		rodeoDamage *= 0.06
	if( [ "mp_weapon_doubletake" ].contains( weaponName ) )
		rodeoDamage *= 0.25
	if( [ "mp_weapon_shotgun", "mp_weapon_shotgun_pistol", "mp_weapon_esaw" ].contains( weaponName ) )
		rodeoDamage *= 0.3
	if( [ "mp_weapon_epg" ].contains( weaponName ) )
		rodeoDamage *= 0.4
	if( [ "mp_weapon_arc_launcher", "mp_weapon_softball", "mp_weapon_defender", "mp_weapon_mgl" ].contains( weaponName ) )
		rodeoDamage *= 0.5
	if( [ "mp_weapon_dmr", "mp_weapon_sniper", "mp_weapon_wingman", "mp_weapon_wingman_n" ].contains( weaponName ) )
		rodeoDamage *= 0.8
	if( [ "mp_weapon_frag_drone", "mp_weapon_frag_grenade", "mp_weapon_deployable_cover", "mp_weapon_grenade_electric_smoke", "mp_weapon_grenade_emp", "mp_weapon_grenade_gravity", "mp_weapon_thermite_grenade", "mp_weapon_grenade_sonar", "mp_weapon_hard_cover", "mp_weapon_satchel" ].contains( weaponName ) )
		rodeoDamage = targetHealth / ( 4 * targetTime )

	if( titanSoul.IsDoomed() )
		rodeoDamage *= 0.5

	//if( damageSourceID == eDamageSourceId.mp_weapon_frag_grenade || damageSourceID == eDamageSourceId.mp_weapon_grenade_gravity || damageSourceID == eDamageSourceId.mp_weapon_grenade_sonar || damageSourceID == eDamageSourceId.mp_weapon_thermite_grenade )
	//	rodeoDamage /= 2

	rodeoDamage *= GetClassicRodeoAdditionalDamageScale()
	int damageTypes = DamageInfo_GetCustomDamageType( damageInfo ) | DF_BYPASS_SHIELD | DF_CRITICAL // always passthrough shield
	#if CLASSIC_RODEO_WEAKPOINT_DEBUG
		print( "rodeoDamage: " + string( rodeoDamage ) )
	#endif

	file.isWeakpointDamage = true // mark as this will be weak point damage
	titan.TakeDamage( rodeoDamage, attacker, attacker, { damageSourceId = eDamageSourceId.rodeo, scriptType = damageTypes } )
	file.isWeakpointDamage = false // clean up
}

// titan gets healing
void function ClassicRodeoBatteryHeal( entity battery, entity titan, int shieldDifference, int addHealth )
{
	// classic rodeo needs to be enabled!
	if ( !ClassicRodeo_IsEnabled() )
		return

	// try to fix weak point damage. passing negative value means fix
	// removed... particles and their attachment not working well in titanfall2
	//RodeoWeakpointDamagedEffect( titan, -addHealth, false )
}

void function ClassicRodeoBatteryRemovalDamage( entity attacker, entity titan, bool isGrenadeDamage, int damageAmount )
{
	// classic rodeo needs to be enabled!
	if ( !ClassicRodeo_IsEnabled() )
		return

	// for grenade damages, do weakpoint damage effect
	// removed... particles and their attachment not working well in titanfall2
	//if ( isGrenadeDamage )
	//	RodeoWeakpointDamagedEffect( titan, damageAmount, false )
}


void function AddCallback_ClassicRodeo_WeakpointTitanDamaged( void functionref( entity, var ) callbackFunc )
{
	if ( !file.weakpointTitanDamagedCallbacks.contains( callbackFunc ) )
		file.weakpointTitanDamagedCallbacks.append( callbackFunc )
}

// handle attached titan damage
void function HandleWeakpointAttachedTitanDamage( entity weakpoint, entity titan )
{
	titan.EndSignal( "OnDestroy" )
	AddEntityCallback_OnDamaged( titan, OnWeakpointAttachedTitanDamaged )

	weakpoint.WaitSignal( "OnDestroy" )
	RemoveEntityCallback_OnDamaged( titan, OnWeakpointAttachedTitanDamaged )
}

void function OnWeakpointAttachedTitanDamaged( entity titan, var damageInfo )
{
	// weakpoint damage mark!
	if ( !file.isWeakpointDamage ) // this isn't weakpoint damage
	{
		// debug
		#if CLASSIC_RODEO_WEAKPOINT_DEBUG
			print( "Titan taking non-weakpoint damage!" )
		#endif
		return
	}

	// debug
	#if CLASSIC_RODEO_WEAKPOINT_DEBUG
		print( "Titan weakpoint damaged!" )
	#endif

	// run modified callbacks
	foreach ( void functionref( entity, var ) callbackFunc in file.weakpointTitanDamagedCallbacks )
		callbackFunc( titan, damageInfo )
	//
}

float function GetClassicRodeoAdditionalDamageScale()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVar( "classic_rodeo_damage_scale" ) != null ) // playlistvar modified
		return GetCurrentPlaylistVarFloat( "classic_rodeo_damage_scale", CLASSIC_RODEO_DEFAULT_DAMAGE_SCALE )

	return file.classicRodeoAdditionalDamage
}
#endif

// in-script settings
void function ClassicRodeo_SetEnabled( bool enabled )
{
	file.classicRodeoEnabled = enabled
}

// shared func
bool function ClassicRodeo_IsEnabled()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVarInt( "classic_rodeo", 0 ) == 1 )
		return true

	return file.classicRodeoEnabled
}