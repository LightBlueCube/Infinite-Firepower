untyped
global function ApplyDropBattery
global function DropBattery
global function ApplyNukeTitan
global function ApplyCruiseMissile
global function ApplyVTOL
global function ApplyNuclearBomb
global function ApplyShieldBattery

void function ApplyDropBattery( entity player )
{
	if( !player.IsHuman() )
		return ApplyFalied( player, "\n你需要处于铁驭状态才能扔出电池" )
	if( !IsAlive( player ) )
		return ApplyFalied( player, "\n死亡时不可丢出电池" )
	if( !PlayerHasMaxBatteryCount( player ) )
		return ApplyFalied( player, "\n你没有电池" )

	DropBattery( player )
}

void function DropBattery( entity player )
{
	if( !player.IsHuman() || !IsAlive( player ) || !PlayerHasMaxBatteryCount( player ) )
		return

	entity battery = Rodeo_TakeBatteryAwayFromPilot( player )
	vector viewVector = player.GetViewVector()
	vector playerVel = player.GetVelocity()
	vector batteryVel = playerVel + viewVector * 200 + < 0, 0, 100 >
	battery.SetVelocity( batteryVel )
	battery.s.touchEnabledTime <- Time() + 1

	if( battery.GetSkin() == 0 )
		thread SendKsGUI_Threaded( player, "\n已丢出电池!", < 100, 255, 100 >, 2, 1 )
	if( battery.GetSkin() == 1 )
		thread SendKsGUI_Threaded( player, "\n已丢出电池!", < 255, 100, 100 >, 2, 1 )
	if( battery.GetSkin() == 2 )
		thread SendKsGUI_Threaded( player, "\n已丢出电池!", < 255, 255, 100 >, 2, 1 )
	EmitSoundOnEntityOnlyToPlayer( player, player, "UI_Menu_Store_Purchase_Success" )
}

void function ApplyNukeTitan( entity player )
{
	if( player.s.NukeTitan <= 0 )
		return ApplyFalied( player, "\n你没有核武泰坦" )
	if( !player.IsHuman() )
		return ApplyFalied( player, "\n你需要处于铁驭状态才能交付核武泰坦" )

	player.s.NukeTitan -= 1
	PlayerInventory_GiveNukeTitan( player )
	thread SendKsGUI_Threaded( player, "按住以持续交付核武泰坦\n成功交付了 1 个核武泰坦\n剩余 "+ player.s.NukeTitan +" 个核武泰坦未交付", < 100, 255, 100 >, 2, 1 )
	EmitSoundOnEntityOnlyToPlayer( player, player, "UI_InGame_FD_ArmoryPurchase" )
}

void function ApplyCruiseMissile( entity player )
{
	if( player.s.CruiseMissile <= 0 )
		return ApplyFalied( player, "\n你没有巡弋飞弹" )
	if( !IsAlive( player ) )
		return ApplyFalied( player, "\n死亡时不可使用巡弋飞弹" )
	if( player.GetTitanSoulBeingRodeoed() )
		return ApplyFalied( player, "\n训牛时不可使用巡弋飞弹" )
	if( player.Anim_IsActive() )
		return ApplyFalied( player, "\n在播放动画时不可使用巡弋飞弹" )
	if( player.GetParent() )
		return ApplyFalied( player, "\n在有绑定的父级实体时不可使用巡弋飞弹" )
	if( !player.IsHuman() )
		return ApplyFalied( player, "\n你需要处于铁驭状态才能使用巡弋飞弹" )
	if( player.IsPhaseShifted() )
		return ApplyFalied( player, "\n你需要离开相位才能使用巡弋飞弹" )
	if( !player.IsOnGround() || player.IsWallRunning() || player.IsWallHanging() )
		return ApplyFalied( player, "\n你需要站在地上才能使用巡弋飞弹" )
	if( player.GetOutOfBoundsDeadTime() >= Time() )
		return ApplyFalied( player, "\n你需要返回战斗区域内才能使用巡弋飞弹" )
	if( player.s.usingCruiseMissile )
		return ApplyFalied( player, "\n你正在使用巡弋飞弹" )

	player.s.CruiseMissile -= 1
	thread CruiseMissileAnim_ThinkBefore( player )
	thread SendKsGUI_Threaded( player, " ", < 100, 255, 100 >, 0, 0 )
	EmitSoundOnEntityOnlyToPlayer( player, player, "UI_InGame_FD_ArmoryPurchase" )
}

void function ApplyVTOL( entity player )
{
	if( !player.s.HaveVTOL )
		return ApplyFalied( player, "\n你没有VTOL" )
	if( !IsAlive( player ) )
		return ApplyFalied( player, "\n死亡时不可使用VTOL" )
	if( player.GetTitanSoulBeingRodeoed() )
		return ApplyFalied( player, "\n训牛时不可使用VTOL" )
	if( player.Anim_IsActive() )
		return ApplyFalied( player, "\n在播放动画时不可使用巡弋飞弹" )
	if( player.GetParent() )
		return ApplyFalied( player, "\n在有绑定的父级实体时不可使用VTOL" )
	if( !player.IsHuman() )
		return ApplyFalied( player, "\n你需要处于铁驭状态才能使用VTOL" )
	if( player.IsPhaseShifted() )
		return ApplyFalied( player, "\n你需要离开相位才能使用VTOL" )
	/*if( !player.IsOnGround() || player.IsWallRunning() || player.IsWallHanging() )
		return ApplyFalied( player, "\n你需要站在地上才能使用VTOL" )
	if( player.s.usingVTOL )
		return ApplyFalied( player, "\n你正在使用VTOL" )
	foreach( ent in GetPlayerArray() )
		if( ent.s.usingVTOL )
			return ApplyFalied( player, "\n场上已存在一个VTOL" )*/

	player.s.HaveVTOL = false
	thread VTOLIntro( player )
	thread SendKsGUI_Threaded( player, " ", < 100, 255, 100 >, 0, 0 )
	EmitSoundOnEntityOnlyToPlayer( player, player, "UI_InGame_FD_ArmoryPurchase" )
}

void function ApplyNuclearBomb( entity player )
{
	if( !player.s.HaveNuclearBomb )
		return ApplyFalied( player, "\n折叠时空武器离线" )
	if( IsNuclearBombDisable() )
		return ApplyFalied( player, "\n已有在途的折叠时空武器打击" )

	thread NuclearBombAnimThink( player )
	thread SendKsGUI_Threaded( player, "\n", < 100, 255, 100 >, 0, 0 )
	EmitSoundOnEntityOnlyToPlayer( player, player, "UI_InGame_FD_ArmoryPurchase" )
}

void function ApplyShieldBattery( entity player )
{
	if( !player.IsHuman() )
		return ApplyFalied( player, "\n你需要处于铁驭状态才能使用电池" )
	if( !IsAlive( player ) )
		return ApplyFalied( player, "\n死亡时不可使用电池" )
	if( !PlayerHasMaxBatteryCount( player ) )
		return ApplyFalied( player, "\n你没有电池" )
	if( player.GetShieldHealth() == player.GetShieldHealthMax() )
		return ApplyFalied( player, "\n护盾已满" )

	thread UseShieldBattery( player )
	thread SendKsGUI_Threaded( player, " ", < 100, 255, 100 >, 0, 0 )
	EmitSoundOnEntityOnlyToPlayer( player, player, "UI_InGame_FD_ArmoryPurchase" )
}

void function ApplyFalied( entity player, string text )
{
	thread SendKsGUI_Threaded( player, text, < 255, 100, 100 >, 2, 1 )
	EmitSoundOnEntityOnlyToPlayer( player, player, "menu_deny" )
}