untyped
global function OrbitalStrikeThink

void function OrbitalStrikeThink( entity player )
{
	if( PlayerHasMaxBatteryCount( player ) )
	{
		entity battery = Rodeo_TakeBatteryAwayFromPilot( player )
		vector viewVector = player.GetViewVector()
		vector playerVel = player.GetVelocity()
		vector batteryVel = playerVel + viewVector * 200 + < 0, 0, 100 >
		battery.SetVelocity( batteryVel )
		battery.s.touchEnabledTime <- Time() + 1
	}

	entity battery = Rodeo_CreateBatteryPack()
	battery.SetSkin( 1 )
	Battery_StartFX( battery )
	Rodeo_OnTouchBatteryPack_Internal( player, battery )

	thread ForceDropBatteryWhenEmbarks( battery, player )
	thread MarkBatteryWaitForActive( battery, player )
}

void function ForceDropBatteryWhenEmbarks( entity battery, entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	battery.EndSignal( "OnDestroy" )

	for( ;; )
	{
		player.WaitSignal( "player_embarks_titan" )
		Rodeo_TakeBatteryAwayFromPilot( player )
		battery.ClearParent()
		battery.SetAngles( < 0, 0, 0 > )
		battery.SetVelocity( < 0, 0, 200 > )
		battery.s.touchEnabledTime <- Time() + 100
	}
}

void function MarkBatteryWaitForActive( entity battery, entity player )
{
	battery.EndSignal( "OnDestroy" )

	for( ;; )
	{
		vector lastPos = battery.GetOrigin()
		WaitFrame()
		if( IsValid( battery.GetParent() ) )
			continue
		battery.s.touchEnabledTime <- Time() + 100
		if( battery.GetOrigin() != lastPos )
			continue
		if( !IsValid( player ) )
		{
			battery.Destroy()
			return
		}

		thread MarkBatteryActive( battery, player )
		battery.s.touchEnabledTime <- Time() + 100
		return
	}
}

void function MarkBatteryActive( entity battery, entity player )
{
	int team = player.GetTeam()

	EmitSoundOnEntity( battery, "Pilot_PulseBlade_Activated_3P" )

	array<vector> strikePos = [ < battery.GetOrigin().x, battery.GetOrigin().y, 4000 > ]
	for( int i = 16; i > 0; i-- )
		strikePos.append( < battery.GetOrigin().x + RandomFloatRange( -500, 500 ), battery.GetOrigin().y + RandomFloatRange( -500, 500 ), 4000 > )
	foreach( pos in strikePos )
	{
		TraceResults trace = TraceLine( pos, pos - < 0, 0, 5000 >, [], TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_BLOCK_WEAPONS )
		if( trace.fraction == 1.0 )
			continue
		thread HotDrop_Spawnpoint( trace.endPos, team, 0.1, false, true )
	}
	foreach( pos in strikePos )
	{
		TraceResults trace = TraceLine( pos, pos - < 0, 0, 5000 >, [], TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_BLOCK_WEAPONS )
		if( trace.fraction == 1.0 )
			continue
		pos = trace.endPos
		thread DropNukeTitan( pos, player )
		thread HotDrop_Spawnpoint( pos, team, 6, true, false )
		EmitSoundAtPosition( TEAM_UNASSIGNED, pos, "Pilot_PulseBlade_Activated_3P" )
		wait RandomFloat( 0.5 )
	}

	wait 1
	if( !IsValid( battery ) )
		return

	PlayImpactFXTable( battery.GetOrigin(), player, "exp_deployable_cover" )
	EmitSoundOnEntity( battery, "weapon_sentryfragdrone_warmup" )
	battery.Destroy()
}

void function DropNukeTitan( vector pos, entity player )
{
	if( !IsValid( player ) )
		return
	PlayImpactFXTable( pos, player, "exp_sonar_pulse" )

	entity titan = CreateOgre( TEAM_UNASSIGNED, pos, < 0, RandomInt( 360 ), 0 > )
	titan.EndSignal( "OnDestroy" )

	SetTeam( titan, player.GetTeam() )
	DispatchSpawn( titan )

	titan.kv.script_hotdrop = "4"
	thread PlayersTitanHotdrops( titan, pos, < 0, RandomInt( 360 ), 0 >, player, "at_hotdrop_drop_2knee_turbo" )
	ClassicRodeo_SetSoulBatteryCount( titan.GetTitanSoul(), false )

	Remote_CallFunction_Replay( player, "ServerCallback_ReplacementTitanSpawnpoint", pos.x, pos.y, pos.z, Time() + GetHotDropImpactTime( titan, "at_hotdrop_drop_2knee_turbo" ) + 1.6 )

	DoomTitan( titan )
	titan.SetBossPlayer(player) // Do this so that if we crush something we get awarded the kill.

	entity soul = titan.GetTitanSoul()
	soul.soul.nukeAttacker = player // Use this to get credit for the explosion kills.

	NPC_SetNuclearPayload( titan )

	titan.WaitSignal( "ClearDisableTitanfall" )
	titan.ClearBossPlayer() // Stop being the boss so we don't get an award for this titan blowing up.

	thread TitanEjectPlayer( titan, true )
}

void function HotDrop_Spawnpoint( vector origin, int team, float impactTime, bool friendly = false, bool enemy = false )
{
	array<entity> targetEffects = []
	vector surfaceNormal = < 0, 0, 1 >

	int index = GetParticleSystemIndex( $"P_ar_titan_droppoint" )

	if( friendly )
	{
		entity effectFriendly = StartParticleEffectInWorld_ReturnEntity( index, origin, surfaceNormal )
		SetTeam( effectFriendly, team )
		EffectSetControlPointVector( effectFriendly, 1, FRIENDLY_COLOR_FX )
		effectFriendly.kv.VisibilityFlags = ENTITY_VISIBLE_TO_FRIENDLY
		effectFriendly.DisableHibernation() // prevent it from fading out
		targetEffects.append( effectFriendly )
	}
	if( enemy )
	{
		entity effectEnemy = StartParticleEffectInWorld_ReturnEntity( index, origin, surfaceNormal )
		SetTeam( effectEnemy, team )
		EffectSetControlPointVector( effectEnemy, 1, ENEMY_COLOR_FX )
		effectEnemy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY
		effectEnemy.DisableHibernation() // prevent it from fading out
		targetEffects.append( effectEnemy )
	}

	wait impactTime

	// clean up
	foreach( entity targetEffect in targetEffects )
	{
		if ( IsValid( targetEffect ) )
			EffectStop( targetEffect )
	}
}