untyped
global function PilotShield_Init
global function UseShieldBattery

void function PilotShield_Init()
{
	RegisterSignal( "StartButtonCancelCheck" )
	RegisterSignal( "StopUseShieldBattery" )
	RegisterSignal( "DoneUseShieldBattery" )

	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	AddCallback_OnTitanBecomesPilot( OnTitanBecomesPilot )
	AddDamageFinalCallback( "player", OnPlayerFinalDamaged )
}

void function OnClientConnected( entity player )
{
	if( !KillStreakEnable() )
		return

	AddPlayerHeldButtonEventCallback( player, IN_OFFHAND4, TryUseShieldBattery, 0.0 )
}

void function OnPlayerFinalDamaged( entity victim, var damageInfo )
{
	float curr = float( victim.GetShieldHealth() )
	float total = float( victim.GetShieldHealthMax() )
	if( curr == 0 || !victim.IsHuman() )
		return

	float damage = DamageInfo_GetDamage( damageInfo )
	if( damage <= 0 )
		return

	DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )

	int damageSourceId = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	if( [ eDamageSourceId.mp_titanability_smoke, eDamageSourceId.mp_weapon_grenade_electric_smoke ].contains( damageSourceId ) )
	{
		int health = victim.GetHealth()
		float lostAmount = damage < curr ? damage / 2 : curr / 2

		if( lostAmount >= health )
		{
			victim.SetShieldHealth( 0 )
			curr = 0
		}
		else
			victim.SetHealth( health - lostAmount )
	}
	if( [ eDamageSourceId.mp_weapon_grenade_emp, eDamageSourceId.mp_titanweapon_stun_impact ].contains( damageSourceId ) )
	{
		if( curr - damage > 0 )
		{
			DamageInfo_SetDamage( damageInfo, curr )
			damage = curr
		}
	}
	if( [ eDamageSourceId.mp_weapon_grenade_sonar ].contains( damageSourceId ) )
	{
		victim.SetShieldHealth( 0 )
	}

	if( damage >= curr )
	{
		// when damage == curr, do not reset the damage amount, cuz its will change to 0 and we will lost hit notice
		if( floor( damage ) > curr )
		{
			DamageInfo_SetDamage( damageInfo, damage - curr )
			victim.SetShieldHealth( 0 )
		}
		StatusEffect_AddTimed( victim, eStatusEffect.emp, 1.0, 1.0, 1.0 )
		//EmitSoundOnEntity( victim, "titan_energyshield_down" )	// early have play this in health_regen.gnut
		if( damage - curr < victim.GetHealth() )
			SendHudMessageWithPriority( victim, 93, "护盾损坏\n0/"+ total, -1, -0.4, < 255, 0, 0 >, < 0, 1.0, 1.0 >, 91 )
		return
	}
	int afterHealth = int( curr - damage )
	StatusEffect_AddTimed( victim, eStatusEffect.emp, GraphCapped( damage, 0, total / 2, 0.2, 0.6 ), GraphCapped( afterHealth, total, 0, 0.5, 1.0 ), 0.5 )
	EmitSoundOnEntityOnlyToPlayer( victim, victim, "titanshieldwall_light_bulletimpact_1p_vs_3p" )
	SendHudMessageWithPriority( victim, 93, "护盾受击\n"+ afterHealth +"/"+ total, -1, -0.4, < 255, int( GraphCapped( afterHealth, total, 0, 255, 0 ) ), 0 >, < 0, 1.0, 1.0 >, 91 )
}

void function OnTitanBecomesPilot( entity player, entity titan )
{
	player.SetShieldHealth( 0 )
	player.SetShieldHealthMax( 0 )
	OnPlayerRespawned( player )
}

void function OnPlayerRespawned( entity player )
{
	if( !KillStreakEnable() )
		return

	// health&shield update
	if ( !IsAlive( player ) ) // can't set health for a no-alive entity
		return
	if ( !player.IsTitan() && player.GetPlayerSettings() != "spectator" )
	{
		player.SetShieldHealthMax( 100 )
		player.SetShieldHealth( 100 )
	}
}

void function TryUseShieldBattery( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	entity activeWeapon = player.GetActiveWeapon()
	wait 0.5
	if( player.GetShieldHealth() == player.GetShieldHealthMax() || !IsValid( GetBatteryOnBack( player ) ) )
	{
		entity inventory = player.GetOffhandWeapon( OFFHAND_INVENTORY )
		if( IsValid( inventory ) )
		{
			player.HolsterWeapon()
			player.DeployWeapon()
			if( inventory.GetWeaponInfoFileKeyField( "fire_mode" ) == "offhand_hybrid" && IsValid( activeWeapon ) )
				player.SetActiveWeaponByName( activeWeapon.GetWeaponClassName() )
		}
		return
	}
	OnThreadEnd(
		function() : ( activeWeapon, player )
		{
			if( !IsValid( player ) )
				return
			if( !IsAlive( player ) )
				return
			entity inventory = player.GetOffhandWeapon( OFFHAND_INVENTORY )
			if( !IsValid( inventory ) || IsValid( activeWeapon ) )
				return
			if( inventory.GetWeaponInfoFileKeyField( "fire_mode" ) != "offhand_hybrid" )
				return
			player.SetActiveWeaponByName( activeWeapon.GetWeaponClassName() )
		}
	)
	UseShieldBattery( player, false )
}

void function UseShieldBattery( entity player, bool attackButtonCancel = true )
{
	player.Signal( "StopUseShieldBattery" )
	player.EndSignal( "StopUseShieldBattery" )
	entity battery = GetBatteryOnBack( player )
	battery.EndSignal( "OnDestroy" )

	table results = {}
	results.canceledUsage <- true // if player cancels usage it will run more functions

	int statusEffectHandle = StatusEffect_AddEndless( player, eStatusEffect.move_slow, 0.3 )

	OnThreadEnd(
		function(): ( player, battery, statusEffectHandle, results )
		{
			if( !IsValid( player ) )
				return

			player.s.DisableGUI = false

			player.DeployWeapon()
			player.Server_TurnOffhandWeaponsDisabledOff()

			StopSoundOnEntity( player, "Weapon_EnergySyphon_Charge_1P" )
			StatusEffect_Stop( player, statusEffectHandle )

			if( !results.canceledUsage )
				return
			if( !IsAlive( player ) )
				return
			if( !IsValid( battery ) )
				return
			if( !PlayerHasMaxBatteryCount( player ) )
				return

			entity newestBattery = Rodeo_TakeBatteryAwayFromPilot( player )
			if( IsValid( battery ) && IsValid( newestBattery ) )
			{
				if( battery == newestBattery )
					Rodeo_PilotPicksUpBattery( player, battery )
				else
					Rodeo_PilotPicksUpBattery( player, newestBattery )
			}
		}
	)
	player.s.DisableGUI = true

	bool isAmped = IsAmpedBattery( battery )
	float r = isAmped ? 255.0 : 100.0
	string text = attackButtonCancel ? "按攻击键取消" : "松开按键取消"
	float useTime = isAmped ? 1.5 : 1.0

	if( attackButtonCancel )
		thread ButtonCancelCheck( player, useTime + 0.6 )

	player.HolsterWeapon()
	player.Server_TurnOffhandWeaponsDisabledOn()
	for( int i = 6; i > 0; i-- )
	{
		while( player.Anim_IsActive() && !player.s.grabbingTitan )
		{
			thread SendKsGUI_Threaded( player, "正在等待动画结束\n" + text, < r, 255, 100 >, 0.2, 0.0, null, -0.4 )
			i = 6
			WaitFrame()
		}
		thread SendKsGUI_Threaded( player, "正在取出电池\n" + text, < r, 255, 100 >, 0.2, 0.0, null, -0.4 )
		WaitFrame()
	}
	battery.ClearParent()
	battery.SetParent( player, "PROPGUN" )
	battery.SetAngles( < 0,90,90 > )
	EmitSoundOnEntityOnlyToPlayer( player, player, "Weapon_EnergySyphon_Charge_1P" )

	float startTime = Time()
	while( startTime + useTime > Time() )
	{
		while( player.Anim_IsActive() && !player.s.grabbingTitan )
		{
			thread SendKsGUI_Threaded( player, "正在等待动画结束\n" + text, < r, 255, 100 >, 0.2, 0.0, null, -0.4 )
			startTime = Time()
			WaitFrame()
		}

		player.HolsterWeapon() // defensive fix
		player.Server_TurnOffhandWeaponsDisabledOn()
		thread SendKsGUI_Threaded( player, "正在使用电池  "+ text +"\n[" + CreateHudProgressBarThroughTime( Time(), startTime, useTime ) + "]", < r, 255, 100 >, 0.2, 0.0, null, -0.4 )

		if( !PlayerHasMaxBatteryCount( player ) )
			return
		WaitFrame()
	}
	if( !PlayerHasMaxBatteryCount( player ) )
		return

	// done using
	player.Signal( "DoneUseShieldBattery" )
	results.canceledUsage = false
	player.SetShieldHealth( player.GetShieldHealthMax() )
	thread SendKsGUI_Threaded( player, "护盾恢复\n"+ player.GetShieldHealth() +"/"+ player.GetShieldHealthMax(), < r, 255, 100 >, 1.0, 1.0, null, -0.4 )

	entity shieldFXHandle = StartParticleEffectOnEntity_ReturnEntity( player, GetParticleSystemIndex( $"P_xo_armor_body_CP" ), FX_PATTACH_POINT_FOLLOW, player.LookupAttachment( "CHESTFOCUS" ) )

	SetTeam( shieldFXHandle, player.GetTeam() )
	shieldFXHandle.SetOwner( player )

	if( isAmped )
		EffectSetControlPointVector( shieldFXHandle, 1, < 255, 165, 0 > )
	else
		EffectSetControlPointVector( shieldFXHandle, 1, < 30, 255, 100 > )

	shieldFXHandle.kv.VisibilityFlags = ENTITY_VISIBLE_TO_ENEMY | ENTITY_VISIBLE_TO_FRIENDLY

	MessageToPlayer( player, eEventNotifications.Rodeo_PilotAppliedBatteryToYou, player, isAmped )

	entity newestBattery = Rodeo_TakeBatteryAwayFromPilot( player )
	if( IsValid( battery ) && IsValid( newestBattery ) )
	{
		if( battery == newestBattery )
			newestBattery.Destroy()
	}
}

string function CreateHudProgressBarThroughTime( float nowGlobalTime, float startGlobalTime, float totalTime )
{
	int sysbolNum = int( GraphCapped( nowGlobalTime, startGlobalTime, startGlobalTime + totalTime, 0, 32 ) ) + 1
	string text = ""
	for( int i = sysbolNum; i > 0; i-- )
		text += "/"
	for( int i = 32 - sysbolNum; i > 0; i-- )
		text += "-"
	return text
}

void function ButtonCancelCheck( entity player, float maxTime )
{
	player.Signal( "StartButtonCancelCheck" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "StartButtonCancelCheck" )
	player.EndSignal( "DoneUseShieldBattery" )
	player.EndSignal( "StopUseShieldBattery" )

	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
				RemoveButtonPressedPlayerInputCallback( player, IN_ATTACK, InterruptShieldBattery )
		}
	)

	AddButtonPressedPlayerInputCallback( player, IN_ATTACK, InterruptShieldBattery )
	wait maxTime
}

void function InterruptShieldBattery( entity player )
{
	player.Signal( "StopUseShieldBattery" )
}